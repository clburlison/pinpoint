#!/usr/bin/python
# encoding: utf-8
"""
pinpoint is a python based script that is able to find the location of your
Mac using either Apple's or Google's GeoCoding APIs.
More information at https://github.com/clburlison/pinpoint
"""

import argparse
import json
import logging
import logging.handlers
import os
import platform
import re
import subprocess
import sys
import tempfile
from datetime import datetime, timedelta
from distutils.version import LooseVersion
from stat import S_IWOTH, S_IXOTH
from threading import Timer
from time import gmtime, sleep, strftime
from urllib2 import HTTPError, URLError, urlopen, Request

import FoundationPlist
import objc
from CoreLocation import (CLGeocoder, CLLocation, CLLocationManager,
                          kCLDistanceFilterNone, kCLLocationAccuracyBest)
from Foundation import (CFPreferencesAppSynchronize, CFPreferencesCopyAppValue,
                        CFPreferencesSetValue, NSDate, NSObject, NSRunLoop,
                        kCFPreferencesAnyUser, kCFPreferencesCurrentHost)

__author__ = 'Clayton Burlison (https://clburlison.com)'
__version__ = '2.0.0.88'

# Our preferences "bundle_id"
BUNDLE_ID = 'com.clburlison.pinpoint'

# Create global plist object for data storage
plist = dict()


def set_pref(pref_name, pref_value):
    """Sets a preference, writing it to
    /Library/Preferences/com.clburlison.pinpoint.plist.
    This should normally be used only for 'bookkeeping' values;
    values that control the behavior of pinpoint may be overridden
    elsewhere (by MCX, for example)"""
    try:
        CFPreferencesSetValue(
            pref_name, pref_value, BUNDLE_ID,
            kCFPreferencesAnyUser, kCFPreferencesCurrentHost)
        CFPreferencesAppSynchronize(BUNDLE_ID)
    except BaseException:
        pass


def pref(pref_name):
    """Return a preference. Since this uses CFPreferencesCopyAppValue,
    Preferences can be defined several places. Precedence is:
        - MCX/profile
        - /Library/Preferences/com.clburlison.pinpoint.plist
        - default_prefs defined here.
    """
    default_prefs = {
        'AddressLookupService': 'apple',
        'CacheDir': '/Library/Application Support/pinpoint',
        'CheckWaitTime': 1800,
        'EnableWireless': False,
        'DisableWireless': False,
        'LookupService': 'apple',
        'GoogleApiKey': 'none',
    }
    pref_value = CFPreferencesCopyAppValue(pref_name, BUNDLE_ID)
    if pref_value is None:
        pref_value = default_prefs.get(pref_name)
        # we're using a default value. We'll write it out to
        # /Library/Preferences/com.clburlison.pinpoint.plist for admin
        # discoverability
        set_pref(pref_name, pref_value)
    return pref_value


def root_check():
    """Check for root access."""
    if not os.geteuid() == 0:
        sys.stderr.write("You must run this as root!")
        exit(1)


def os_vers():
    """Retrieve OS version."""
    return platform.mac_ver()[0]


def os_check():
    """Only supported on 10.12+."""
    if not LooseVersion(os_vers()) >= LooseVersion('10.12'):
        status = "Your OS is not supported: %s" % (
            platform.mac_ver()[0])
        logging.warn(status)
        write_to_cache_location(None, status, None)
        exit(0)


def current_time():
    """Prints current date/time stamp"""
    timeFormat = "%Y-%m-%d %H:%M:%S +0000"
    now = strftime(timeFormat, gmtime())
    return now


def check_wait_period(override):
    """Limit the amount of lookups a computer will run.
    We want to use this in conjunction with our LaunchDaemon to
    make sure we always have updated data available without
    going over API limits."""

    # If we pass an override, skip this check
    if override:
        return True

    # Setup and retrive date/time values for checking
    now = convert_date_type(current_time())
    LastCheckDate = pref('LastCheckDate')
    CheckWaitTime = pref('CheckWaitTime')
    last_run_time = convert_date_type(LastCheckDate)

    if CheckWaitTime < 900:
        logging.warn("Your current CheckWaitTime value of %s might not run\n"
                     "as often as you wish due to the LaunchDaemon running"
                     "pinpoint.", CheckWaitTime)

    try:
        future_run_time = last_run_time + timedelta(seconds=CheckWaitTime)
        if now >= future_run_time:
            return True
        else:
            logging.warn("It is not time to run again! Use '-f' "
                         "if you wish to force a lookup.")
            exit(1)
    except TypeError:
        return True


def convert_date_type(strDate):
    """Convert date string type to date type."""
    try:
        return datetime.strptime(strDate, "%Y-%m-%d %H:%M:%S +0000")
    except TypeError:
        pass


def update_check_time():
    """Record last check time"""
    now = current_time()
    logging.debug("Updating 'LastCheckDate' timestamp")
    set_pref('LastCheckDate', now)


def write_to_cache_location(data, status, past_loc):
    """Method to write plist data to disk"""
    global plist
    is_enabled = CLLocationManager.locationServicesEnabled()
    if data is not None:
        plist = data
    if past_loc is not None:
        stale_record = dict(StaleLocation=str('Yes'))
    base_stats = dict(
        CurrentStatus=str(status),
        LastRun=str(current_time()),
        LS_Enabled=bool(is_enabled),
        StaleLocation=str('No'),
    )
    plist.update(base_stats)
    if status != "Successful":
        try:
            logging.debug("Keep past location as we were unable to "
                          "determine your current location")
            plist.update(past_loc)
            plist.update(stale_record)
        except TypeError:
            pass
    output_file = os.path.join(pref('CacheDir'), "location.plist")
    logging.debug("Writing current run details to: %s",
                  output_file)
    FoundationPlist.writePlist(plist, output_file)


def retrieve_past_location():
    """Return the past location from the on disk plist."""
    output_file = os.path.join(pref('CacheDir'), "location.plist")
    logging.debug("Storing past location")
    try:
        on_disk = FoundationPlist.readPlist(output_file)
    except (AttributeError,
            FoundationPlist.NSPropertyListSerializationException):
        on_disk = dict()

    # parse the output to only return the values we want to keep
    try:
        old_location = dict(
            Address=on_disk['Address'],
            GoogleMap=on_disk['GoogleMap'],
            LastLocationRun=on_disk['LastLocationRun'],
            Latitude=on_disk['Latitude'],
            Longitude=on_disk['Longitude'],
        )
    except KeyError:
        old_location = dict()
    return old_location


def kill_services():
    """On 10.12, both the locationd and cfprefsd services like to not respect
    preference changes so we force them to reload."""
    logging.debug("Currently killing cfprefsd service")
    proc = subprocess.Popen(['/usr/bin/killall', '-9', 'cfprefsd'],
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    logging.debug("Currently killing locationd service")
    proc = subprocess.Popen(['/usr/bin/killall', '-9', 'locationd'],
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)


def service_handler(action):
    """Loads/unloads System's location services job on supported OSs."""
    supported, current = LooseVersion('10.12.4'), LooseVersion(os_vers())
    if action is 'load':
        kill_services()
    if current < supported:
        logging.debug("Currently %sing locationd service", action)
        launchctl = ['/bin/launchctl', action,
                     '/System/Library/LaunchDaemons/com.apple.locationd.plist']
        subprocess.check_output(launchctl)


def sysprefs_boxchk():
    """Enables location services in sysprefs globally."""
    # Use the offical Apple API for determining location services status
    ls_status = CLLocationManager.locationServicesEnabled()
    if ls_status is not True:
        logging.info("Location Services are not enabled")
        service_handler('unload')
        write_cmd = ['/usr/bin/sudo', '-u', '_locationd', '/usr/bin/defaults',
                     '-currentHost', 'write', 'com.apple.locationd',
                     'LocationServicesEnabled', '-bool', 'TRUE']
        subprocess.check_output(write_cmd)
        logging.info("Location Services have been enabled")
        service_handler('load')
    else:
        logging.info("Location Services are enabled")


def add_python():
    """Python dict for clients.plist in locationd settings."""
    domain = 'org.python.python'
    bundle_path = ('/System/Library/Frameworks/Python.framework/'
                   'Versions/2.7/Resources/Python.app')
    executable_path = '{}/Contents/MacOS/Python'.format(bundle_path)
    requirement = 'identifier "org.python.python" and anchor apple'
    auth_plist = {'Authorized': True,
                  'BundleId': domain,
                  'BundlePath': bundle_path,
                  'Executable': executable_path,
                  'Hide': 0,
                  'Registered': '',
                  'Requirement': requirement,
                  'Whitelisted': False,
                  }
    das_plist = '/private/var/db/locationd/clients.plist'
    try:
        clients_dict = FoundationPlist.readPlist(das_plist)
    except (AttributeError,
            FoundationPlist.NSPropertyListSerializationException):
        p = {}
        FoundationPlist.writePlist(p, das_plist)
        clients_dict = FoundationPlist.readPlist(das_plist)
    val = clients_dict.get(domain, None)
    logging.debug("Current location domain of client.plist is: ")
    logging.debug(val)
    need_to_run = False
    try:
        if val["Authorized"] is not True:
            need_to_run = True
    except TypeError:
        need_to_run = True
    except KeyError:
        need_to_run = True

    if need_to_run:
        logging.info("We need to authorize python")
        service_handler('unload')
        clients_dict[domain] = auth_plist
        FoundationPlist.writePlist(clients_dict, das_plist)
        os.chown(das_plist, 205, 205)
        service_handler('load')
        logging.debug("Current location domain of client.plist is now: ")
        logging.debug(clients_dict.get(domain, None))
        logging.info("Location Services was enabled.")
    else:
        logging.info("Python is enabled")


def lookup(service, api_key, time=None):
    """Have Apple's CoreLocation framework or Google's Geocoding API find
    the current location."""
    global plist
    if service == 'apple':
        if time == 1:
            finder = MyLocationManagerDelegate.alloc().init()
            NSRunLoop.currentRunLoop().\
                runUntilDate_(NSDate.dateWithTimeIntervalSinceNow_(time))
        else:
            time = 5
            # Run 3 loops in an attempt to find a location.
            # Each loop increases time by 5 seconds.
            for x in range(3):
                logging.debug("Running lookup loop: %s", x)
                finder = MyLocationManagerDelegate.alloc().init()
                NSRunLoop.currentRunLoop().\
                    runUntilDate_(NSDate.dateWithTimeIntervalSinceNow_(time))
                try:
                    if plist['Latitude'] is not None:
                        break
                except KeyError:
                    time += 5
    if service == 'google':
        if api_key.lower() == 'none':
            status = "Google API key not provided."
            plist = dict(CurrentStatus=str("Unsuccessful: " + status))
            logging.warn(status)
            exit(0)
        scan = wireless().wireless_scan()
        api_url = ("https://www.googleapis.com/geolocation/"
                   "v1/geolocate?key=" + api_key)
        # We only send the closet five access points in our api request
        request_data = {
          "considerIp": "false",
          "wifiAccessPoints": []
        }
        count = 0
        for i, val in enumerate(scan):
            request_data['wifiAccessPoints'].append({
                'macAddress':val.get('BSSID'),
                'signalStrength':val.get('RSSI'),
                'signalToNoiseRatio':0})
            count += 1
            if count == 5:
                break
        dump = json.dumps(request_data).encode("utf8")
        try:
            request = Request(api_url, dump,
                {'Content-type': 'application/json'})
            f = urlopen(request)
            data = f.read()
            f.close()
            data = json.loads(data)
        except HTTPError, e:
            data = False
            logging.debug("HTTP Error: %s, %s", e.code, api_url)
        except URLError, e:
            data = False
            logging.debug("URL Error: %s, %s", e.reason, api_url)
        if ((data is not False) and ('error' not in data)) :
            obj = data;
            lat = plist['Latitude'] = obj["location"]["lat"]
            lon = plist['Longitude'] = obj["location"]["lng"]
            gmap = (r"https://www.google.com/maps/place/{0},{1}"
                    "/@{0},{1},18z/data=!3m1!1e3".format(str(lat), str(lon)))
            logging.info("Process a lookup request via: %s", service)
            plist = dict(
                CurrentStatus=str("Successful"),
                GoogleMap=str(gmap),
                LastLocationRun=str(current_time()),
                Latitude=str(lat),
                Longitude=str(lon),
            )
            logging.debug("Successful lookup request: %s, %s",
                          plist['Latitude'], plist['Longitude'])
        else:
            status = "Google lookup request failed"
            plist = dict(CurrentStatus=str("Unsuccessful: " + status))
            logging.warn(status)

def download_file(url):
    """Download a simple file from the Internet."""
    logging.info("Downloading a file...")
    data = False
    try:
        temp_file = os.path.join(tempfile.mkdtemp(), 'tempdata')
        f = urlopen(url.replace(" ", "%20"))
        with open(temp_file, "wb") as local_file:
            local_file.write(f.read())
        logging.info("Download successful")
    except HTTPError, e:
        logging.debug("HTTP Error: %s, %s", e.code, url)
    except URLError, e:
        logging.debug("URL Error: %s, %s", e.reason, url)
    try:
        file_handle = open(temp_file)
        data = file_handle.read()
        file_handle.close()
    except (OSError, IOError):
        logging.debug("Couldn't read %s", temp_file)
    try:
        os.unlink(temp_file)
        os.rmdir(os.path.dirname(temp_file))
    except (OSError, IOError):
        pass
    return data


class script_runner(object):
    """Functions for running a script safely in the context of root."""
    # Borrowed from Outset - Joe Chilcote
    def check_perms(self, pathname):
        """Check permissions of script before running to verify only root
        has access."""
        mode = os.stat(pathname).st_mode
        owner = os.stat(pathname).st_uid
        if owner == 0 and (mode & S_IXOTH) and not (mode & S_IWOTH):
            return True
        else:
            return False

    def kill_proc(self, proc, timeout):
        """Function to stop processes if they've gone rogue."""
        timeout["value"] = True
        proc.kill()

    def run_script(self, pathname, scripttype, timeout_sec=10):
        """Runs script located at given pathname"""
        if os.path.exists(pathname):
            if self.check_perms(pathname):
                try:
                    proc = subprocess.Popen(pathname,
                                            shell=False,
                                            stdout=subprocess.PIPE,
                                            stderr=subprocess.PIPE)
                    timeout = {"value": False}
                    timer = Timer(timeout_sec, self.kill_proc, [proc, timeout])
                    timer.start()
                    logging.info('Processing %s...', scripttype)
                    (stdout, stderr) = proc.communicate()
                    timer.cancel()
                    if timeout["value"] is True:
                        logging.warn("Script timed out while processing %s",
                                     pathname)
                    if stderr and proc.returncode == 0:
                        logging.info("Output from %s on stderr but it "
                                     "still ran successfully: %s",
                                     pathname, stderr)
                    elif proc.returncode > 0:
                        logging.warn("Failure processing %s: %s",
                                     pathname, stderr)
                    elif proc.returncode == 0:
                        logging.info("Successfully processed %s ", scripttype)
                    return proc.returncode,
                    stdout.decode("utf-8", 'replace'),
                    stderr.decode("utf-8", 'replace'),
                    timeout["value"]
                except (OSError, IOError) as err:
                    logging.warn("Failure processing %s: %s", pathname, err)
                    return False
            else:
                logging.warn("Bad permissions: %s", pathname)
                return False
        else:
            logging.debug("No %s script on disk", scripttype)
            return True


class wireless(object):
    """All functions related to our Mac's wireless."""
    # required for toggle_wireless however we don't want to load the bundle
    # twice so we load it here
    bundle_path = '/System/Library/Frameworks/CoreWLAN.framework'
    objc.loadBundle('CoreWLAN',
                    bundle_path=bundle_path,
                    module_globals=globals())

    def get_wireless_interface(self):
        """Returns the wireless interface device name or None if
        no adapter found (e.g., en0 or en1)."""
        wireless_interface = None
        hardware_ports = subprocess.check_output(['/usr/sbin/networksetup',
                                                  '-listallhardwareports'])
        match = re.search("(AirPort|Wi-Fi).*?(en\\d)", hardware_ports, re.S)
        if match:
            wireless_interface = match.group(2)
        return wireless_interface

    def wireless_status(self):
        """Determine current power state for wireless adapter.
        Return 'On' or 'Off'."""
        iface_name = self.get_wireless_interface()
        command = ['/usr/sbin/networksetup', '-getairportpower',
                   iface_name]
        proc = subprocess.Popen(command, stdout=subprocess.PIPE)
        wifi_power = (proc.communicate()[0].replace('\n', '')
                      .split(":")[1].replace(' ', ''))
        logging.debug("Wireless interface is currently: %s",
                      wifi_power)
        return wifi_power

    def wireless_scan(self):
        """Scan for current networks and return a sorted list of dictionary
        objects."""
        logging.info("Scanning for wireless networks...")
        ssid_scan = subprocess.check_output(
                        ['/System/Library/PrivateFrameworks/'
                         'Apple80211.framework/Versions/A/'
                         'Resources/airport', '-s', '--xml']
                         )
        ssid_scan = FoundationPlist.readPlistFromString(ssid_scan)
        logging.info("Scanning complete")
        values = []
        for i, val in enumerate(ssid_scan):
            wifi_stats = {'RSSI': val.get('RSSI'),
                          'BSSID': val.get('BSSID'),
                          'SSID_STR': val.get('SSID_STR')
                          }
            values.append(wifi_stats)

        # Sort our values by RSSI to increase accuracy of location
        sorted_list = sorted(values, key=lambda k: k['RSSI'], reverse=True)
        logging.debug("Local wireless networks: \n%s", sorted_list)
        return sorted_list

    def toggle_wireless(self, value):
        """Toggle the wireless adapter. Takes argument of value as:
        'on' to enable or 'off' to disable wireless.
        Return True if we made a change."""
        wifi_power = self.wireless_status()
        iface = CWInterface.interface()
        value = value.lower()
        if value == "on":
            setPower = True
        if value == "off":
            setPower = False
        if (wifi_power == 'Off' and value == "on") or (
            wifi_power == 'On' and value == "off"
        ):
            iface.setPower_error_(setPower, None)
            logging.debug("Wireless adapter has been turned %s.", value)
            sleep(5)
            return True
        else:
            return False


class MyLocationManagerDelegate(NSObject):
    """CoreLocation delegate for handling location lookups. This class
    is required for python to properly start/stop lookups with location
    services."""
    is_authorized = CLLocationManager.authorizationStatus()
    is_enabled = CLLocationManager.locationServicesEnabled()

    def init(self):
        """Define location manager settings for lookups."""
        self = super(MyLocationManagerDelegate, self).init()
        if not self:
            return
        self.locationManager = CLLocationManager.alloc().init()
        self.locationManager.setDelegate_(self)
        self.locationManager.setDistanceFilter_(kCLDistanceFilterNone)
        self.locationManager.setDesiredAccuracy_(kCLLocationAccuracyBest)
        self.locationManager.startUpdatingLocation()
        return self

    def locationManager_didUpdateToLocation_fromLocation_(self, manager,
                                                          newloc, oldloc):
        """Splits location data into separate pieces for processing later."""
        lat = newloc.coordinate().latitude
        lon = newloc.coordinate().longitude
        verAcc = newloc.verticalAccuracy()
        horAcc = newloc.horizontalAccuracy()
        altitude = newloc.altitude()
        time = newloc.timestamp()
        gmap = (r"https://www.google.com/maps/place/{0},{1}"
                "/@{0},{1},18z/data=!3m1!1e3".format(str(lat), str(lon)))
        logging.info("Process a lookup request via: apple")
        global plist
        plist = dict(
            Altitude=int(altitude),
            CurrentStatus=str("Successful"),
            GoogleMap=str(gmap),
            LastLocationRun=str(time),
            Latitude=str(lat),
            LatitudeAccuracy=int(verAcc),
            Longitude=str(lon),
            LongitudeAccuracy=int(horAcc),
        )
        logging.debug("Successful lookup request: %s, %s",
                      plist['Latitude'], plist['Longitude'])

    def locationManager_didFailWithError_(self, manager, err):
        """Handlers errors for location manager."""
        if self.is_enabled is True:
            if self.is_authorized == 3:
                status = "Unable to locate"
            if self.is_authorized == 2:
                status = "Denied"
            if self.is_authorized == 1:
                status = "Restricted"
            if self.is_authorized == 0:
                status = "Not Determined"
        else:
            status = "Location Services Disabled"

        global plist
        plist = dict(CurrentStatus=str("Unsuccessful: " + status))
        logging.warn("Apple lookup request failed")
        logging.debug("Unsuccessful lookup request: %s", status)


class ReverseLookup(object):
    """All functions related to doing a reverse lookup request."""
    # Store our lookup data from Apple's GeoCoder in the following varriable.
    data = None

    def myCompletionHandler(self, placemarks, error):
        """Completion Handler for Apple's GeoCoder."""
        if error is not None:
            # This is an NSError:
            # Error Domain=kCLErrorDomain Code=2 "(null)" - wifi is off
            self.data = str(error)
        elif(placemarks.count() > 0):
            # Placemarks is a CLPlacemark object. Retrieve the data at index 0
            # then the convert the formattedAddressLines, which is an NSArray,
            # into a formated address string.
            addressAsString = ' '.join(placemarks[0].formattedAddressLines())
            self.data = addressAsString
        else:
            self.data = "Unable to retrevie lookup for unknown reason."

    def address_lookup(self, service):
        """Resolve coordinates to a street address."""
        global plist
        api_url = 'https://maps.googleapis.com/maps/api/geocode/json?latlng='
        logging.info("Doing a reverse lookup via: {0}".format(service))
        if pref('AddressLookupService').lower() != 'none':
            try:
                if plist['Latitude']:
                    lat = plist['Latitude']
                    lon = plist['Longitude']
                    if service == 'google':
                        try:
                            url = '%s%s,%s' % (api_url, lat, lon)
                            data = download_file(url)
                            obj = json.loads(data)
                            address = obj["results"][0]["formatted_address"]
                        except:
                            address = 'Google reverse lookup failed.'
                            logging.warn(address)
                    elif service == 'apple':
                        # We are storing the lat/lon values as strings
                        # and must convert them to float before passing to
                        # Apple's geocoder.
                        location = CLLocation.alloc(
                            ).initWithLatitude_longitude_(
                                float(lat), float(lon))
                        geocoder = CLGeocoder.alloc().init()
                        geocoder.reverseGeocodeLocation_completionHandler_(
                            location, self.myCompletionHandler)
                        NSRunLoop.currentRunLoop().runUntilDate_(
                            NSDate.dateWithTimeIntervalSinceNow_(3))
                        address = (self.data)
                    else:
                        address = ('Unsupported address lookup service: '
                                   '{0}'.format(service))
                        logging.warn(address)
            except KeyError:
                address = 'Unable to determine address'
                logging.warn(address)
        else:
            address = 'Address lookup has been disabled on this computer.'

        # update plist with the address data
        add = dict(Address=address.encode('UTF-8'))
        logging.info("Address is: %s", address)
        plist.update(add)


def main():
    """Main method for handling options."""
    parser = argparse.ArgumentParser(prog='pinpoint',
                                     description='This script will attempt to '
                                     'locate your mac.')
    parser.add_argument('--auto', action='store_true', default=True,
                        help='Used by the LaunchDaemon to find your mac in '
                        'the background.')
    parser.add_argument('-v', '--verbose', action='count',
                        help="Increase verbosity level. Repeatable up to "
                        "two times.")
    parser.add_argument('-f', '--force', action='store_true',
                        help='Force the location lookup run disregarding '
                        'last check time.')
    parser.add_argument('-l', '--lookup', required=False,
                        help='Override the configured lookup service.')
    parser.add_argument('-k', '--apikey', required=False,
                        help='API key for the Google lookup service.')
    parser.add_argument('-a', '--address', required=False,
                        help='Override the configured address lookup service.')
    parser.add_argument('-V', '--version', action='store_true',
                        help='Print script version')
    args = parser.parse_args()

    if args.version:
        print __version__
        exit()

    # Verify we are running as root
    root_check()

    # This is the cache directory where we store our found location
    cachedir = pref('CacheDir')
    if not os.path.exists(cachedir):
        os.makedirs(cachedir)

    # Get root logger and set default logging level
    rootLogger = logging.getLogger('')
    rootLogger.setLevel(logging.DEBUG)

    # Write everything to the rotating log file
    log_dir = os.path.join(cachedir, 'Logs')
    if not os.path.exists(log_dir):
        os.mkdir(log_dir)
    log_file = os.path.join(log_dir, 'pinpoint.log')
    log_file_handler = logging.handlers.RotatingFileHandler(
                                filename=log_file,
                                backupCount=3,
                                maxBytes=5242880)
    log_file_format = logging.Formatter(
                                fmt='%(asctime)s [%(levelname)s]: %(message)s',
                                datefmt='%Y-%m-%d %I:%M:%S %p')
    log_file_handler.setFormatter(log_file_format)
    log_file_handler.setLevel(logging.DEBUG)
    rootLogger.addHandler(log_file_handler)

    # Log to the console at a level determined by the --verbose flag
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.CRITICAL)
    console_handler.setFormatter(logging.Formatter(
        '[%(levelname)s]: %(message)s'))
    rootLogger.addHandler(console_handler)

    args = parser.parse_args()
    if not args.verbose:
        console_handler.setLevel('WARNING')
    elif args.verbose == 1:
        console_handler.setLevel('INFO')
    else:
        console_handler.setLevel('DEBUG')

    if args.force:
        override = True
    else:
        override = False

    if args.lookup:
        lookup_service = args.lookup.lower()
    else:
        lookup_service = pref('LookupService').lower()

    if args.apikey:
        api_key = args.apikey
    else:
        api_key = pref('GoogleApiKey')

    if args.address:
        address_lookup_service = args.address.lower()
    else:
        address_lookup_service = pref('AddressLookupService').lower()

    if args.auto:
        os_check()
        if wireless().get_wireless_interface() is None:
            status = "No wireless interface found."
            write_to_cache_location(None, status, None)
            logging.warn(status)
            exit(0)

        # Only enable Location Services and Python if the `LookupService`
        # is set to apple.
        logging.debug("Current LookupService is: %s", lookup_service)
        if lookup_service == 'apple':
            sysprefs_boxchk()
            add_python()
        if check_wait_period(override):
            update_check_time()
            past_loc = retrieve_past_location()
            # Only enable the wireless adapter if the preference key is True
            if pref('EnableWireless'):
                WirelessOutput = wireless().toggle_wireless('on')
            else:
                WirelessOutput = False
            if wireless().wireless_status() == 'Off':
                status = "Wireless interface is turned off."
                write_to_cache_location(None, status, past_loc)
                logging.warn(status)
                exit(0)

            # Run the preflight script if it exists and has good perms
            preflightscript = os.path.join(cachedir, 'preflight')
            result = script_runner().run_script(preflightscript, 'preflight')
            # we ignore the result of the preflight

            # Process our lookup and reverse lookup
            lookup(lookup_service, api_key)
            ReverseLookup().address_lookup(address_lookup_service)

            # Set the fall back error status
            status = ("Error obtaining a location. LS was unresponsive "
                      "or a lookup timeout occurred.")
            try:
                global plist
                status = plist['CurrentStatus']
                write_to_cache_location(plist, status, past_loc)
                if status == "Successful":
                    logging.info("Current location: %s, %s",
                                 plist['Latitude'], plist['Longitude'])
                logging.info("Run status: %s", plist['CurrentStatus'])
            except KeyError:
                logging.warn(status)
                write_to_cache_location(plist, status, past_loc)

            # Run the postflight script if it exists and has good perms
            postflightscript = os.path.join(cachedir, 'postflight')
            result = script_runner().run_script(postflightscript, 'postflight')
            # we ignore the result of the postflight

            # Only disable the wireless adapter if the preference key is True
            # and pinpoint earlier enabled wireless
            if pref('DisableWireless'):
                if WirelessOutput:
                    WirelessOutput = wireless().toggle_wireless('off')

if __name__ == '__main__':
    main()
